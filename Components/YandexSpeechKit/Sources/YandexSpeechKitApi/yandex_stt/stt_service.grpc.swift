//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: yandex/cloud/ai/stt/v2/stt_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Yandex_Cloud_Ai_Stt_V2_SttServiceClient`, then call methods of this protocol to make API calls.
internal protocol Yandex_Cloud_Ai_Stt_V2_SttServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Yandex_Cloud_Ai_Stt_V2_SttServiceClientInterceptorFactoryProtocol? { get }

  func longRunningRecognize(
    _ request: Yandex_Cloud_Ai_Stt_V2_LongRunningRecognitionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Yandex_Cloud_Ai_Stt_V2_LongRunningRecognitionRequest, Yandex_Cloud_Operation_Operation>

  func streamingRecognize(
    callOptions: CallOptions?,
    handler: @escaping (Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionResponse) -> Void
  ) -> BidirectionalStreamingCall<Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionRequest, Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionResponse>
}

extension Yandex_Cloud_Ai_Stt_V2_SttServiceClientProtocol {
  internal var serviceName: String {
    return "yandex.cloud.ai.stt.v2.SttService"
  }

  /// Unary call to LongRunningRecognize
  ///
  /// - Parameters:
  ///   - request: Request to send to LongRunningRecognize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func longRunningRecognize(
    _ request: Yandex_Cloud_Ai_Stt_V2_LongRunningRecognitionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Yandex_Cloud_Ai_Stt_V2_LongRunningRecognitionRequest, Yandex_Cloud_Operation_Operation> {
    return self.makeUnaryCall(
      path: "/yandex.cloud.ai.stt.v2.SttService/LongRunningRecognize",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLongRunningRecognizeInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to StreamingRecognize
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func streamingRecognize(
    callOptions: CallOptions? = nil,
    handler: @escaping (Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionResponse) -> Void
  ) -> BidirectionalStreamingCall<Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionRequest, Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/yandex.cloud.ai.stt.v2.SttService/StreamingRecognize",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamingRecognizeInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Yandex_Cloud_Ai_Stt_V2_SttServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'longRunningRecognize'.
  func makeLongRunningRecognizeInterceptors() -> [ClientInterceptor<Yandex_Cloud_Ai_Stt_V2_LongRunningRecognitionRequest, Yandex_Cloud_Operation_Operation>]

  /// - Returns: Interceptors to use when invoking 'streamingRecognize'.
  func makeStreamingRecognizeInterceptors() -> [ClientInterceptor<Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionRequest, Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionResponse>]
}

internal final class Yandex_Cloud_Ai_Stt_V2_SttServiceClient: Yandex_Cloud_Ai_Stt_V2_SttServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Yandex_Cloud_Ai_Stt_V2_SttServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the yandex.cloud.ai.stt.v2.SttService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Yandex_Cloud_Ai_Stt_V2_SttServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Yandex_Cloud_Ai_Stt_V2_SttServiceProvider: CallHandlerProvider {
  var interceptors: Yandex_Cloud_Ai_Stt_V2_SttServiceServerInterceptorFactoryProtocol? { get }

  func longRunningRecognize(request: Yandex_Cloud_Ai_Stt_V2_LongRunningRecognitionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Yandex_Cloud_Operation_Operation>

  func streamingRecognize(context: StreamingResponseCallContext<Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionResponse>) -> EventLoopFuture<(StreamEvent<Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionRequest>) -> Void>
}

extension Yandex_Cloud_Ai_Stt_V2_SttServiceProvider {
  internal var serviceName: Substring { return "yandex.cloud.ai.stt.v2.SttService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "LongRunningRecognize":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Yandex_Cloud_Ai_Stt_V2_LongRunningRecognitionRequest>(),
        responseSerializer: ProtobufSerializer<Yandex_Cloud_Operation_Operation>(),
        interceptors: self.interceptors?.makeLongRunningRecognizeInterceptors() ?? [],
        userFunction: self.longRunningRecognize(request:context:)
      )

    case "StreamingRecognize":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionRequest>(),
        responseSerializer: ProtobufSerializer<Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionResponse>(),
        interceptors: self.interceptors?.makeStreamingRecognizeInterceptors() ?? [],
        observerFactory: self.streamingRecognize(context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Yandex_Cloud_Ai_Stt_V2_SttServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'longRunningRecognize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLongRunningRecognizeInterceptors() -> [ServerInterceptor<Yandex_Cloud_Ai_Stt_V2_LongRunningRecognitionRequest, Yandex_Cloud_Operation_Operation>]

  /// - Returns: Interceptors to use when handling 'streamingRecognize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamingRecognizeInterceptors() -> [ServerInterceptor<Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionRequest, Yandex_Cloud_Ai_Stt_V2_StreamingRecognitionResponse>]
}
