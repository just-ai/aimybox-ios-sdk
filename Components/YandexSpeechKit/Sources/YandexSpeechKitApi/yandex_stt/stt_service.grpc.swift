//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: yandex/cloud/ai/stt/v3/stt_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// A set of methods for voice recognition.
///
/// Usage: instantiate `Speechkit_Stt_V3_RecognizerClient`, then call methods of this protocol to make API calls.
internal protocol Speechkit_Stt_V3_RecognizerClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Speechkit_Stt_V3_RecognizerClientInterceptorFactoryProtocol? { get }

  func recognizeStreaming(
    callOptions: CallOptions?,
    handler: @escaping (Speechkit_Stt_V3_StreamingResponse) -> Void
  ) -> BidirectionalStreamingCall<Speechkit_Stt_V3_StreamingRequest, Speechkit_Stt_V3_StreamingResponse>
}

extension Speechkit_Stt_V3_RecognizerClientProtocol {
  internal var serviceName: String {
    return "speechkit.stt.v3.Recognizer"
  }

  /// Expects audio in real-time
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func recognizeStreaming(
    callOptions: CallOptions? = nil,
    handler: @escaping (Speechkit_Stt_V3_StreamingResponse) -> Void
  ) -> BidirectionalStreamingCall<Speechkit_Stt_V3_StreamingRequest, Speechkit_Stt_V3_StreamingResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/speechkit.stt.v3.Recognizer/RecognizeStreaming",
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecognizeStreamingInterceptors() ?? [],
      handler: handler
    )
  }
}

internal protocol Speechkit_Stt_V3_RecognizerClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'recognizeStreaming'.
  func makeRecognizeStreamingInterceptors() -> [ClientInterceptor<Speechkit_Stt_V3_StreamingRequest, Speechkit_Stt_V3_StreamingResponse>]
}

internal final class Speechkit_Stt_V3_RecognizerClient: Speechkit_Stt_V3_RecognizerClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Speechkit_Stt_V3_RecognizerClientInterceptorFactoryProtocol?

  /// Creates a client for the speechkit.stt.v3.Recognizer service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Speechkit_Stt_V3_RecognizerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// A set of methods for voice recognition.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Speechkit_Stt_V3_RecognizerProvider: CallHandlerProvider {
  var interceptors: Speechkit_Stt_V3_RecognizerServerInterceptorFactoryProtocol? { get }

  /// Expects audio in real-time
  func recognizeStreaming(context: StreamingResponseCallContext<Speechkit_Stt_V3_StreamingResponse>) -> EventLoopFuture<(StreamEvent<Speechkit_Stt_V3_StreamingRequest>) -> Void>
}

extension Speechkit_Stt_V3_RecognizerProvider {
  internal var serviceName: Substring { return "speechkit.stt.v3.Recognizer" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RecognizeStreaming":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Speechkit_Stt_V3_StreamingRequest>(),
        responseSerializer: ProtobufSerializer<Speechkit_Stt_V3_StreamingResponse>(),
        interceptors: self.interceptors?.makeRecognizeStreamingInterceptors() ?? [],
        observerFactory: self.recognizeStreaming(context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Speechkit_Stt_V3_RecognizerServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'recognizeStreaming'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecognizeStreamingInterceptors() -> [ServerInterceptor<Speechkit_Stt_V3_StreamingRequest, Speechkit_Stt_V3_StreamingResponse>]
}
