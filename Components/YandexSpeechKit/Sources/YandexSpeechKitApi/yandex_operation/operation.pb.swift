// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: yandex/cloud/operation/operation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// An Operation resource. For more information, see [Operation](/docs/api-design-guide/concepts/operation).
struct Yandex_Cloud_Operation_Operation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID of the operation.
  var id: String = String()

  /// Description of the operation. 0-256 characters long.
  var description_p: String = String()

  /// Creation timestamp.
  var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {self._createdAt = nil}

  /// ID of the user or service account who initiated the operation.
  var createdBy: String = String()

  /// The time when the Operation resource was last modified.
  var modifiedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _modifiedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_modifiedAt = newValue}
  }
  /// Returns true if `modifiedAt` has been explicitly set.
  var hasModifiedAt: Bool {return self._modifiedAt != nil}
  /// Clears the value of `modifiedAt`. Subsequent reads from it will return its default value.
  mutating func clearModifiedAt() {self._modifiedAt = nil}

  /// If the value is `false`, it means the operation is still in progress.
  /// If `true`, the operation is completed, and either `error` or `response` is available.
  var done: Bool = false

  /// Service-specific metadata associated with the operation.
  /// It typically contains the ID of the target resource that the operation is performed on.
  /// Any method that returns a long-running operation should document the metadata type, if any.
  var metadata: SwiftProtobuf.Google_Protobuf_Any {
    get {return _metadata ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {self._metadata = nil}

  /// The operation result.
  /// If `done == false` and there was no failure detected, neither `error` nor `response` is set.
  /// If `done == false` and there was a failure detected, `error` is set.
  /// If `done == true`, exactly one of `error` or `response` is set.
  var result: Yandex_Cloud_Operation_Operation.OneOf_Result? = nil

  /// The error result of the operation in case of failure or cancellation.
  var error: Google_Rpc_Status {
    get {
      if case .error(let v)? = result {return v}
      return Google_Rpc_Status()
    }
    set {result = .error(newValue)}
  }

  /// The normal response of the operation in case of success.
  /// If the original method returns no data on success, such as Delete,
  /// the response is [google.protobuf.Empty].
  /// If the original method is the standard Create/Update,
  /// the response should be the target resource of the operation.
  /// Any method that returns a long-running operation should document the response type, if any.
  var response: SwiftProtobuf.Google_Protobuf_Any {
    get {
      if case .response(let v)? = result {return v}
      return SwiftProtobuf.Google_Protobuf_Any()
    }
    set {result = .response(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The operation result.
  /// If `done == false` and there was no failure detected, neither `error` nor `response` is set.
  /// If `done == false` and there was a failure detected, `error` is set.
  /// If `done == true`, exactly one of `error` or `response` is set.
  enum OneOf_Result: Equatable {
    /// The error result of the operation in case of failure or cancellation.
    case error(Google_Rpc_Status)
    /// The normal response of the operation in case of success.
    /// If the original method returns no data on success, such as Delete,
    /// the response is [google.protobuf.Empty].
    /// If the original method is the standard Create/Update,
    /// the response should be the target resource of the operation.
    /// Any method that returns a long-running operation should document the response type, if any.
    case response(SwiftProtobuf.Google_Protobuf_Any)

  #if !swift(>=4.1)
    static func ==(lhs: Yandex_Cloud_Operation_Operation.OneOf_Result, rhs: Yandex_Cloud_Operation_Operation.OneOf_Result) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.response, .response): return {
        guard case .response(let l) = lhs, case .response(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _modifiedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _metadata: SwiftProtobuf.Google_Protobuf_Any? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Yandex_Cloud_Operation_Operation: @unchecked Sendable {}
extension Yandex_Cloud_Operation_Operation.OneOf_Result: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "yandex.cloud.operation"

extension Yandex_Cloud_Operation_Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Operation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "description"),
    3: .standard(proto: "created_at"),
    4: .standard(proto: "created_by"),
    5: .standard(proto: "modified_at"),
    6: .same(proto: "done"),
    7: .same(proto: "metadata"),
    8: .same(proto: "error"),
    9: .same(proto: "response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.createdBy) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._modifiedAt) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.done) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 8: try {
        var v: Google_Rpc_Status?
        var hadOneofValue = false
        if let current = self.result {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.result = .error(v)
        }
      }()
      case 9: try {
        var v: SwiftProtobuf.Google_Protobuf_Any?
        var hadOneofValue = false
        if let current = self.result {
          hadOneofValue = true
          if case .response(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.result = .response(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.createdBy.isEmpty {
      try visitor.visitSingularStringField(value: self.createdBy, fieldNumber: 4)
    }
    try { if let v = self._modifiedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.done != false {
      try visitor.visitSingularBoolField(value: self.done, fieldNumber: 6)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    switch self.result {
    case .error?: try {
      guard case .error(let v)? = self.result else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .response?: try {
      guard case .response(let v)? = self.result else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Yandex_Cloud_Operation_Operation, rhs: Yandex_Cloud_Operation_Operation) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.createdBy != rhs.createdBy {return false}
    if lhs._modifiedAt != rhs._modifiedAt {return false}
    if lhs.done != rhs.done {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
