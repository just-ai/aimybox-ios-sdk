//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: yandex/cloud/operation/operation_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// A set of methods for managing operations for asynchronous API requests.
///
/// Usage: instantiate `Yandex_Cloud_Operation_OperationServiceClient`, then call methods of this protocol to make API calls.
internal protocol Yandex_Cloud_Operation_OperationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Yandex_Cloud_Operation_OperationServiceClientInterceptorFactoryProtocol? { get }

  func get(
    _ request: Yandex_Cloud_Operation_GetOperationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Yandex_Cloud_Operation_GetOperationRequest, Yandex_Cloud_Operation_Operation>

  func cancel(
    _ request: Yandex_Cloud_Operation_CancelOperationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Yandex_Cloud_Operation_CancelOperationRequest, Yandex_Cloud_Operation_Operation>
}

extension Yandex_Cloud_Operation_OperationServiceClientProtocol {
  internal var serviceName: String {
    return "yandex.cloud.operation.OperationService"
  }

  /// Returns the specified Operation resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to Get.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get(
    _ request: Yandex_Cloud_Operation_GetOperationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Yandex_Cloud_Operation_GetOperationRequest, Yandex_Cloud_Operation_Operation> {
    return self.makeUnaryCall(
      path: "/yandex.cloud.operation.OperationService/Get",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  /// Cancels the specified operation.
  ///
  /// Note that currently Yandex Object Storage API does not support cancelling operations.
  ///
  /// - Parameters:
  ///   - request: Request to send to Cancel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancel(
    _ request: Yandex_Cloud_Operation_CancelOperationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Yandex_Cloud_Operation_CancelOperationRequest, Yandex_Cloud_Operation_Operation> {
    return self.makeUnaryCall(
      path: "/yandex.cloud.operation.OperationService/Cancel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelInterceptors() ?? []
    )
  }
}

internal protocol Yandex_Cloud_Operation_OperationServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'get'.
  func makeGetInterceptors() -> [ClientInterceptor<Yandex_Cloud_Operation_GetOperationRequest, Yandex_Cloud_Operation_Operation>]

  /// - Returns: Interceptors to use when invoking 'cancel'.
  func makeCancelInterceptors() -> [ClientInterceptor<Yandex_Cloud_Operation_CancelOperationRequest, Yandex_Cloud_Operation_Operation>]
}

internal final class Yandex_Cloud_Operation_OperationServiceClient: Yandex_Cloud_Operation_OperationServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Yandex_Cloud_Operation_OperationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the yandex.cloud.operation.OperationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Yandex_Cloud_Operation_OperationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// A set of methods for managing operations for asynchronous API requests.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Yandex_Cloud_Operation_OperationServiceProvider: CallHandlerProvider {
  var interceptors: Yandex_Cloud_Operation_OperationServiceServerInterceptorFactoryProtocol? { get }

  /// Returns the specified Operation resource.
  func get(request: Yandex_Cloud_Operation_GetOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Yandex_Cloud_Operation_Operation>

  /// Cancels the specified operation.
  ///
  /// Note that currently Yandex Object Storage API does not support cancelling operations.
  func cancel(request: Yandex_Cloud_Operation_CancelOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Yandex_Cloud_Operation_Operation>
}

extension Yandex_Cloud_Operation_OperationServiceProvider {
  internal var serviceName: Substring { return "yandex.cloud.operation.OperationService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Get":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Yandex_Cloud_Operation_GetOperationRequest>(),
        responseSerializer: ProtobufSerializer<Yandex_Cloud_Operation_Operation>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        userFunction: self.get(request:context:)
      )

    case "Cancel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Yandex_Cloud_Operation_CancelOperationRequest>(),
        responseSerializer: ProtobufSerializer<Yandex_Cloud_Operation_Operation>(),
        interceptors: self.interceptors?.makeCancelInterceptors() ?? [],
        userFunction: self.cancel(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Yandex_Cloud_Operation_OperationServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'get'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInterceptors() -> [ServerInterceptor<Yandex_Cloud_Operation_GetOperationRequest, Yandex_Cloud_Operation_Operation>]

  /// - Returns: Interceptors to use when handling 'cancel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelInterceptors() -> [ServerInterceptor<Yandex_Cloud_Operation_CancelOperationRequest, Yandex_Cloud_Operation_Operation>]
}
